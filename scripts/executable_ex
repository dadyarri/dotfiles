#!/bin/bash

# ARG_POSITIONAL_SINGLE([archive],[File path of archive to unpack])
# ARG_OPTIONAL_SINGLE([directory],[d],[Path, where to extract archive],[.])
# ARG_DEFAULTS_POS([])
# ARG_HELP([Ex - little wrapper to simplify unpacking of different archives\nSupports .tar.bz2, .tar.gz, .bz2, .rar, .gz, .tar, .tbz2, .tbz2, .tgz, .zip, .Z, .7z, .xz.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='dh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_archive=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_directory="."


print_help()
{
	printf '%s\n' "Ex - little wrapper to simplify unpacking of different archives
Supports .tar.bz2, .tar.gz, .bz2, .rar, .gz, .tar, .tbz2, .tbz2, .tgz, .zip, .Z, .7z, .xz."
	printf 'Usage: %s [-d|--directory <arg>] [-h|--help] <archive>\n' "$0"
	printf '\t%s\n' "<archive>: File path of archive to unpack"
	printf '\t%s\n' "-d, --directory: Path, where to extract archive (default: '.')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-d|--directory)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_directory="$2"
				shift
				;;
			--directory=*)
				_arg_directory="${_key##--directory=}"
				;;
			-d*)
				_arg_directory="${_key##-d}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'archive'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_archive "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv

if [ -f "$_arg_archive" ] ; then
  case "$_arg_archive" in
    *.tar.bz2)
      tar xjf "$_arg_archive" -C "$_arg_directory"
      ;;
    *.tar.gz)
      tar xzf "$_arg_archive" -C "$_arg_directory"
      ;;
    *.bz2)
      tar xjf "$_arg_archive" -C "$_arg_directory"
      ;;
    *.rar)
      rar x "$_arg_archive"
      ;;
    *.gz)
      gunzip "$_arg_archive"
      ;;
    *.tar)
      tar xvf "$_arg_archive" -C "$_arg_directory"
      ;;
    *.tbz2)
      tar xjf "$_arg_archive" -C "$_arg_directory"
      ;;
    *.tgz)
      tar xzf "$_arg_archive" -C "$_arg_directory"
      ;;
    *.zip)
      unzip "$_arg_archive" -d "$_arg_directory"
      ;;
    *.Z)
      uncompress "$_arg_archive"
      ;;
    *.7z)
      7za x "$_arg_archive"
      ;;
    *.xz)
      xz -d "$_arg_archive"
      ;;
    *)
      ansi --red "'$_arg_archive' cannot be extracted via $0"
      exit 1
      ;;
  esac
else
  ansi --red "'$_arg_archive' is not a valid file"
  exit 1
fi


# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
